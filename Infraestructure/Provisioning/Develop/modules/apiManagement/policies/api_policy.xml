<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />
        <choose>
            <when condition="@(!context.Request.Headers.ContainsKey(&quot;Content-Type&quot;) || context.Request.Headers.GetValueOrDefault(&quot;Content-Type&quot;, &quot;&quot;).ToLower() != &quot;application/json&quot;)">
                <return-response>
                    <set-status code="415" reason="Unsupported Media Type" />
                    <set-body>@{
                        return Newtonsoft.Json.JsonConvert.SerializeObject(new {
                            code = "S415000",
                            message = "Format "+ context.Request.Headers.GetValueOrDefault(&quot;Content-Type&quot;, &quot;&quot;).ToLower() +" is not supported by the request"
                        });
                    }</set-body>
                </return-response>
            </when>
        </choose>
        <validate-content unspecified-content-type-action="prevent" max-size="102400" size-exceeded-action="prevent" errors-variable-name="requestBodyValidation">
            <content type="application/json" validate-as="json" action="prevent" allow-additional-properties="false" />
        </validate-content>
    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Response.Headers.GetValueOrDefault("Content-Type", "").StartsWith("application/json") == false)">
                <return-response>
                    <set-status code="503" reason="Service not available" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return Newtonsoft.Json.JsonConvert.SerializeObject(new {
                            code = "S503000",
                            message = "Service not available, try again later."
                        });
                    }</set-body>
                </return-response>
            </when>
        </choose>
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>